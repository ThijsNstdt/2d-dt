//// Created by thijs on 28/02/2023.//#include "histogram.hpp"#include <utility>Histogram::Histogram(std::vector<int> data) : data_(std::move(data)) {    make_histogram();    make_normalized_histogram();}std::map<int, int> Histogram::get_histogram() const{    return histogram_;}std::map<int, double> Histogram::get_normalized_histogram() const{    return normalized_histogram_;}std::vector<int> Histogram::get_bins() const{    std::vector<int> bins;    for (auto &pair : histogram_) {        bins.push_back(pair.first);    }    return bins;}std::vector<int> Histogram::get_counts() const{    std::vector<int> counts;    for (auto &pair : histogram_) {        counts.push_back(pair.second);    }    return counts;}std::vector<double> Histogram::get_normalized_counts() const {    std::vector<double> counts;    for (auto &pair : normalized_histogram_) {        counts.push_back(pair.second);    }    return counts;}void Histogram::make_histogram() {    for (auto &datum : data_) {        ++histogram_[datum];    }}void Histogram::make_normalized_histogram() {    auto size = static_cast<double>(data_.size()); // cast to double for double return further down    for (auto &datum : data_) {        ++normalized_histogram_[datum];    }    // divide here instead of adding 1/size each time to avoid rounding errors    for (auto &pair: normalized_histogram_) {        normalized_histogram_[pair.first] = pair.second/size;    }}