//// Created by thijs on 04/01/2023.//#include <gtest/gtest.h>#include <fstream>#include <string>#include <json/json.h>#include <vector>#include "src/jsonutilities/jsonutilities.hpp"TEST(jsonUtilitiesTests, WritingJsonArray) {    // clear any existing stuff    std::ofstream ofs;    std::string file = "./tests/jsonutilities_tests/test.json";    ofs.open(file, std::ofstream::out | std::ofstream::trunc);    Json::Value vec(Json::arrayValue);    vec.append(Json::Value(0));    vec.append(Json::Value(1));    vec.append(Json::Value(2));    vec.append(Json::Value(3));    jsonUtilities::writeVectorToJson(vec, {}, "data", file);    Json::Value realRoot;    std::ifstream ifs;    ifs.open(file);    Json::CharReaderBuilder builder;    builder["collectComments"] = false;    Json::String errs;    bool couldParse = parseFromStream(builder, ifs, &realRoot, &errs);    EXPECT_TRUE(couldParse);    if (!couldParse) {        std::cout << errs << std::endl;    }    bool hasDataAsMember = realRoot.isMember("data");    EXPECT_TRUE(hasDataAsMember);    EXPECT_TRUE(realRoot["data"][0].asInt() == 0);    EXPECT_TRUE(realRoot["data"][1].asInt() == 1);    EXPECT_TRUE(realRoot["data"][2].asInt() == 2);    EXPECT_TRUE(realRoot["data"][3].asInt() == 3);}template Json::Value jsonUtilities::iterable2json<std::vector<unsigned int>>(std::vector<unsigned int> const &cont);TEST(jsonUtilitiesTests, WritingVector) {    // clear any existing stuff    std::ofstream ofs;    std::string file = "./tests/jsonutilities_tests/test.json";    ofs.open(file, std::ofstream::out | std::ofstream::trunc);    Json::Value root;    std::vector<unsigned int> vec = {0, 1, 2, 3};    Json::Value jsonArray = jsonUtilities::iterable2json<std::vector<unsigned int>>(vec);    jsonUtilities::writeVectorToJson(jsonArray, {"foo", "bar"}, "data", file);    Json::Value realRoot;    std::ifstream ifs;    ifs.open(file);    Json::CharReaderBuilder builder;    builder["collectComments"] = false;    Json::String errs;    bool couldParse = parseFromStream(builder, ifs, &realRoot, &errs);    EXPECT_TRUE(couldParse);    if (!couldParse) {        std::cout << errs << std::endl;    }    bool hasDataAsMember = realRoot.isMember("data");    EXPECT_TRUE(hasDataAsMember);    EXPECT_TRUE(realRoot["data"][0].asInt() == 0);    EXPECT_TRUE(realRoot["data"][1].asInt() == 1);    EXPECT_TRUE(realRoot["data"][2].asInt() == 2);    EXPECT_TRUE(realRoot["data"][3].asInt() == 3);}