//// Created by thijs on 17/11/2022.//#include "src/simplices/vertex.hpp"#include <gtest/gtest.h>TEST(VertexTests, NeighborAddingDetecting) {    Vertex v(0);    Vertex nbrV(1);    Vertex notNbrV(2);    EdgeLabel nbrE(0);    EdgeLabel notNbrE(1);    Vertex::VertexEdgeTuple myTuple(&nbrV, nbrE);    Vertex::VertexEdgeTuple firstNotMyTuple(&notNbrV, nbrE);    Vertex::VertexEdgeTuple secondNotMyTuple(&nbrV, notNbrE);    v.addNeighbor(&nbrV, nbrE);    bool hasNeighbor = v.hasNeighbor(myTuple);    bool hasNotFirstNeighbor = !v.hasNeighbor(firstNotMyTuple);    bool hasNotSecondNeighbor = !v.hasNeighbor(secondNotMyTuple);    EXPECT_TRUE(hasNeighbor);    EXPECT_TRUE(hasNotFirstNeighbor);    EXPECT_TRUE(hasNotSecondNeighbor);}TEST(VertexTests, NeighborRemoving) {    Vertex v(0);    Vertex nbr(1);    EdgeLabel nbrEdge(0);    Vertex::VertexEdgeTuple nbrTuple(&nbr, nbrEdge);    v.addNeighbor(&nbr, nbrEdge);    v.removeNeighbor(nbrTuple);    EXPECT_EQ(v.getDegree(), 0);    v.removeNeighbor(nbrTuple);    EXPECT_EQ(v.getDegree(), 0);}TEST(VertexTests, DuplicateNeighborHandling) {    Vertex v(0);    Vertex nbr(1);    Vertex duplicateNbr = nbr;    EdgeLabel nbrEdge(0);    EdgeLabel duplicateNbrEdge = nbrEdge;    v.addNeighbor(&nbr, nbrEdge);    v.addNeighbor(&duplicateNbr, duplicateNbrEdge);    EXPECT_EQ(v.getDegree(), 1);    v.removeNeighbor(Vertex::VertexEdgeTuple(&nbr, nbrEdge));    EXPECT_FALSE(v.hasNeighbor(Vertex::VertexEdgeTuple(&nbr, nbrEdge)));}